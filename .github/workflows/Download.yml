name: Download File and Release

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL of the file to download'
        required: true
      file_name:
        description: 'Save file name (leave blank to use original file name from URL)'
        required: false
        default: ''

jobs:
  download_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Identify file name and extension
        id: identify_file
        run: |
          FILE_URL="${{ github.event.inputs.file_url }}"
          FILE_NAME=$(curl -sI "$FILE_URL" | grep -o -E 'filename=.*$' | sed -e 's/filename=//' | tr -d '\r\n')
          if [ -z "$FILE_NAME" ]; then
            FILE_NAME=$(basename "$FILE_URL")
            if [[ ${#FILE_NAME} -gt 50 || ! "$FILE_NAME" == *.* ]]; then
              FILE_NAME="temp.file"
              echo "No file name found in URL or header." >> $GITHUB_ENV
            fi
          fi
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV
          MIME_TYPE=$(curl -sI "$FILE_URL" | grep -oP 'Content-Type: \K.*' | tr -d '\r\n')
          EXTENSION="${MIME_TYPE##*/}"
          echo "FILE_NAME_WITH_EXT=$FILE_NAME.$EXTENSION" >> $GITHUB_ENV
          echo "FILE_EXTENSION=$EXTENSION" >> $GITHUB_ENV

      - name: Download file
        run: wget "${{ github.event.inputs.file_url }}" -O "${{ env.FILE_NAME_WITH_EXT }}"

      - name: Rename file if necessary
        id: rename_file
        run: |
          FILE_NAME="${{ github.event.inputs.file_name }}"
          FILE_EXTENSION="${{ env.FILE_EXTENSION }}"
          if [ -z "$FILE_NAME" ]; then
            FILE_NAME="${{ env.FILE_NAME }}"
          else
            FILE_NAME="${FILE_NAME}.${FILE_EXTENSION}"
          fi
          mv "${{ env.FILE_NAME_WITH_EXT }}" "$FILE_NAME"
          echo "FINAL_FILE_NAME=$FILE_NAME" >> $GITHUB_STATE

      - name: Debug env variables
        run: |
          echo "FILE_NAME_WITH_EXT=${{ env.FILE_NAME_WITH_EXT }}"
          echo "FINAL_FILE_NAME=$(cat $GITHUB_STATE | grep FINAL_FILE_NAME | cut -d '=' -f2)"

      - name: Determine new release version
        run: echo "release_version=v1.2.$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}
        with:
          tag_name: ${{ env.release_version }}
          release_name: Release ${{ env.release_version }}
          body: |
            File URL: ${{ github.event.inputs.file_url }}
            !File Preview
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/$(cat $GITHUB_STATE | grep FINAL_FILE_NAME | cut -d '=' -f2)
          asset_name: $(cat $GITHUB_STATE | grep FINAL_FILE_NAME | cut -d '=' -f2)
          asset_content_type: application/octet-stream

      - name: Update release notes with preview
        run: |
          ASSET_URL=$(jq --raw-output '.browser_download_url' <<< "${{ steps.upload_release_asset.outputs }}")
          FILE_EXTENSION="${{ env.FILE_EXTENSION }}"
          if [[ "$FILE_EXTENSION" =~ ^(jpg|png|gif)$ ]]; then
            PREVIEW_TEXT="!Image Preview"
          elif [[ "$FILE_EXTENSION" =~ ^(mp3|wav)$ ]]; then
            PREVIEW_TEXT="Listen to Audio"
          elif [[ "$FILE_EXTENSION" =~ ^(mp4|avi)$ ]]; then
            PREVIEW_TEXT="Watch Video"
          else
            PREVIEW_TEXT="File URL: $ASSET_URL"
          fi
          gh release edit "${{ env.release_version }}" --body "$PREVIEW_TEXT"
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}
          
