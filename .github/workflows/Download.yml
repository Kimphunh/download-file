name: Download File and Release

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL của file cần tải'
        required: true
      file_name:
        description: 'Tên lưu file đã tải (để trống để sử dụng tên file gốc từ URL)'
        required: false
        default: ''

jobs:
  download_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Identify file name and extension
        run: |
          set -e  # Exit on any error
          FILE_URL="${{ github.event.inputs.file_url }}"
          INPUT_FILE_NAME="${{ github.event.inputs.file_name }}"

          echo "Fetching headers from URL: $FILE_URL"
          HEADERS=$(curl -sI "$FILE_URL")

          # Attempt to get the file name from the Content-Disposition header
          DEFAULT_FILE_NAME=$(echo "$HEADERS" | grep -o -E 'filename="[^"]+"' | sed -e 's/filename="//' -e 's/"$//')

          if [ -z "$DEFAULT_FILE_NAME" ]; then
            DEFAULT_FILE_NAME=$(basename "$FILE_URL" | cut -d'?' -f1)
            if [[ ${#DEFAULT_FILE_NAME} -gt 50 || ! "$DEFAULT_FILE_NAME" == *.* ]]; then
              DEFAULT_FILE_NAME="temp.file"
            fi
          fi

          # Get the MIME type to determine the file extension
          MIME_TYPE=$(echo "$HEADERS" | grep -oP 'Content-Type: \K[^;]+')
          EXTENSION="${MIME_TYPE##*/}"

          if [ -z "$INPUT_FILE_NAME" ]; then
            FILE_NAME="$DEFAULT_FILE_NAME"
          else
            FILE_NAME="$INPUT_FILE_NAME"
          fi

          if [[ "$FILE_NAME" != *.* ]]; then
            FILE_NAME="${FILE_NAME}.${EXTENSION}"
          fi

          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV
          echo "FILE_EXTENSION=$EXTENSION" >> $GITHUB_ENV

      - name: Download file
        run: |
          FILE_URL="${{ github.event.inputs.file_url }}"
          FILE_NAME="${{ env.FILE_NAME }}"
          echo "Downloading file from: $FILE_URL"
          wget "$FILE_URL" -O "$FILE_NAME"

      - name: Determine new release version
        run: echo "release_version=v1.0.$(( ${{ github.run_number }} + 1 ))" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_version }}
          release_name: Release ${{ env.release_version }}
          body: |
            File URL: ${{ github.event.inputs.file_url }}
            !File Preview
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.FILE_NAME }}
          asset_name: ${{ env.FILE_NAME }}
          asset_content_type: application/octet-stream

      - name: Update release notes with preview
        run: |
          ASSET_URL=$(jq --raw-output '.browser_download_url' <<< "${{ steps.upload_release_asset.outputs }}")
          PREVIEW_TEXT="File Download Link: $ASSET_URL"

          if [[ "${{ env.FILE_EXTENSION }}" =~ ^(jpg|jpeg|png|gif)$ ]]; then
            PREVIEW_TEXT="![Image Preview]($ASSET_URL)"
          elif [[ "${{ env.FILE_EXTENSION }}" =~ ^(mp3|wav)$ ]]; then
            PREVIEW_TEXT="[Listen to Audio]($ASSET_URL)"
          elif [[ "${{ env.FILE_EXTENSION }}" =~ ^(mp4|avi)$ ]]; then
            PREVIEW_TEXT="[Watch Video]($ASSET_URL)"
          fi
          
          gh release edit "${{ env.release_version }}" --notes "$PREVIEW_TEXT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
