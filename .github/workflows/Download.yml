
name: Download and Release File

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL of the file to download'
        required: true

jobs:
  download_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release
        id: get_latest_release
        uses: actions/get-latest-release@v1 # Using the older version
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}

      - name: Determine new release version
        id: determine_version
        run: |
          if [[ -z ${{ steps.get_latest_release.outputs.tag_name }} ]]; then
            echo "release_version=v1.0.0" >> $GITHUB_ENV
          else
            latest_version="${{ steps.get_latest_release.outputs.tag_name }}"
            major=$(echo "$latest_version" | cut -d'.' -f1)
            minor=$(echo "$latest_version" | cut -d'.' -f2)
            patch=$(echo "$latest_version" | cut -d'.' -f3)
            patch=$((patch + 1))
            echo "release_version=v${major}.${minor}.${patch}" >> $GITHUB_ENV
          fi

      - name: Extract file name from server headers
        id: extract_file_name
        run: |
          file_url="${{ github.event.inputs.file_url }}"
          file_name=$(curl -sI "$file_url" | grep -o -E 'filename=.*$' | sed -e 's/filename=//' | tr -d '\r\n')
          if [ -z "$file_name" ]; then
            file_name=$(basename "$file_url")
            echo "File name not found in server headers. Using file name from URL: $file_name"
          fi
          echo "file_name=$file_name" >> $GITHUB_ENV

      - name: Download file
        id: download_file
        run: wget ${{ github.event.inputs.file_url }} -O ${{ env.file_name }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.1.0 # Using the older version
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}
        with:
          tag_name: ${{ env.release_version }}
          release_name: "Release ${{ env.release_version }}"
          body: |
            This release includes the following file:
            - ${{ env.file_name }}
            
            Version: ${{ env.release_version }}
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.file_name }}
          asset_name: ${{ env.file_name }}
          asset_content_type: application/zip 
