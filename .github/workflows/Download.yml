name: Download File and Release

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL of the file to download'
        required: true
        default: ''
      file_name:
        description: 'Name to save the downloaded file as (leave blank to use original filename from URL)'
        required: false
        default: ''

jobs:
  identify_and_download:
    runs-on: ubuntu-latest

    steps:
      - name: Identify file name
        id: identify_file_name
        run: |
          FILE_URL="${{ github.event.inputs.file_url }}"
          FILE_NAME=""
          if [[ $FILE_URL =~ .*\?.*filename=([^&]+) ]]; then
            FILE_NAME="${BASH_REMATCH[1]}"
          elif [[ $FILE_URL =~ /([^/]+)\.(?!.*\.) ]]; then
            FILE_NAME="${BASH_REMATCH[1]}"
          elif [[ ${#FILE_URL} -gt 50 ]]; then
            echo "::warning::Unable to identify file name from URL"
          else
            FILE_NAME="temp.file"
            echo "::warning::Unable to identify file name from URL"
          fi
          echo "::set-output name=file_name::$FILE_NAME"

      - name: Download file
        id: download_file
        run: wget "${{ github.event.inputs.file_url }}" -O "${{ steps.identify_file_name.outputs.file_name }}"

      - name: Last-minute adjustments
        if: ${{ github.event.inputs.file_name }}
        run: |
          NEW_FILE_NAME="${{ github.event.inputs.file_name }}"
          EXTENSION="${NEW_FILE_NAME##*.}"
          if [[ ! $EXTENSION ]]; then
            EXTENSION="${steps.identify_file_name.outputs.file_name##*.}"
            NEW_FILE_NAME="${NEW_FILE_NAME}.${EXTENSION}"
          fi
          mv "${{ steps.identify_file_name.outputs.file_name }}" "$NEW_FILE_NAME"

      - name: Determine release version
        id: determine_release_version
        run: |
          PREVIOUS_RELEASE=$(git describe --tags --abbrev=0)
          MAJOR=$(echo $PREVIOUS_RELEASE | cut -d'.' -f1)
          MINOR=$(echo $PREVIOUS_RELEASE | cut -d'.' -f2)
          PATCH=$(echo $PREVIOUS_RELEASE | cut -d'.' -f3)
          PATCH=$((PATCH + 1))
          NEW_RELEASE="$MAJOR.$MINOR.$PATCH"
          echo "::set-output name=release_version::$NEW_RELEASE"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.determine_release_version.outputs.release_version }}
          release_name: Release ${{ steps.determine_release_version.outputs.release_version }}
          body: |
            File URL: ${{ github.event.inputs.file_url }}
            File Name: ${{ steps.identify_file_name.outputs.file_name }}
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ github.event.inputs.file_name || steps.identify_file_name.outputs.file_name }}
          asset_name: ${{ github.event.inputs.file_name || steps.identify_file_name.outputs.file_name }}
          asset_content_type: application/octet-stream
