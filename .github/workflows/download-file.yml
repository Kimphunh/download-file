name: Download File and Release

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL of the file to download'
        required: true
        default: ''
      file_name:
        description: 'Name to save the downloaded file as'
        required: true
        default: ''

jobs:
  download_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs track "${{ github.event.inputs.file_name }}"
          git add .gitattributes
          git commit -m "Setup Git LFS" || echo "No changes to commit"

      - name: Download file
        run: wget "${{ github.event.inputs.file_url }}" -O "${{ github.event.inputs.file_name }}"

      - name: Get the latest release version
        id: get_latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Determine new release version
        id: determine_version
        run: |
          if [ -z "${{ steps.get_latest_release.outputs.data }}" ]; then
            echo "new_version=1.0.0" >> $GITHUB_ENV
          else
            latest_version=$(echo "${{ steps.get_latest_release.outputs.data }}" | jq -r .tag_name)
            major=$(echo $latest_version | cut -d'.' -f1)
            minor=$(echo $latest_version | cut -d'.' -f2)
            patch=$(echo $latest_version | cut -d'.' -f3)
            new_patch=$((patch + 1))
            new_version="${major}.${minor}.${new_patch}"
            echo "new_version=$new_version" >> $GITHUB_ENV
          fi

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}
          release_name: Release ${{ env.new_version }}
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: $GITHUB_WORKSPACE/${{ github.event.inputs.file_name }}
          asset_name: ${{ github.event.inputs.file_name }}
          asset_content_type: application/octet-stream
