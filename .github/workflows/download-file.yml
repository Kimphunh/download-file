name: Download File and Release

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL of the file to download'
        required: true
        default: ''
      new_file_name:
        description: 'New name for the downloaded file (leave blank to keep original name)'
        required: false
        default: ''

jobs:
  download_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Check for .gitattributes
        run: |
          if [ -f ".gitattributes" ]; then
            echo ".gitattributes exists"
          else
            echo ".gitattributes does not exist"
          fi

      - name: Determine file name
        id: determine_file_name
        run: |
          FILE_URL="${{ github.event.inputs.file_url }}"
          FILE_NAME=$(basename "${FILE_URL}")
          if [ ${#FILE_NAME} -gt 50 ]; then
            # Send query to server to get file name
            FILE_NAME=$(curl -sI "${FILE_URL}" | grep -i "^content-disposition" | sed 's/.*filename=//' | tr -d '\r\n')
          fi
          if [ -z "${FILE_NAME}" ]; then
            # Fallback to temporary name if unable to get file name
            FILE_NAME="file.temp"
          fi
          echo "::set-output name=file_name::${FILE_NAME}"

      - name: Download file
        run: wget "${{ github.event.inputs.file_url }}" -O "${{ steps.determine_file_name.outputs.file_name }}"

      - name: Finalize file name
        if: ${{ github.event.inputs.new_file_name }}
        run: |
          NEW_FILE_NAME="${{ github.event.inputs.new_file_name }}"
          EXTENSION="${{ steps.determine_file_name.outputs.file_name | splitext | last }}"
          mv "${{ steps.determine_file_name.outputs.file_name }}" "${NEW_FILE_NAME}.${EXTENSION}"

      - name: Determine new release version
        id: determine_release_version
        run: echo "::set-output name=release_version::v1.0.$(( ${{ github.run_number }} + 1 ))"

      - name: Create release notes
        id: create_release_notes
        run: |
          FILE_URL="${{ github.event.inputs.file_url }}"
          FILE_NAME="${{ github.event.inputs.new_file_name || steps.determine_file_name.outputs.file_name }}"
          FILE_EXTENSION="${{ steps.determine_file_name.outputs.file_name | splitext | last }}"
          
          if [[ $FILE_EXTENSION == "jpg" || $FILE_EXTENSION == "jpeg" || $FILE_EXTENSION == "png" || $FILE_EXTENSION == "gif" ]]; then
            PREVIEW="<img src='${FILE_NAME}.${FILE_EXTENSION}' alt='${FILE_NAME}' width='600' />"
          elif [[ $FILE_EXTENSION == "mp4" || $FILE_EXTENSION == "webm" || $FILE_EXTENSION == "ogg" ]]; then
            PREVIEW="<video width='600' controls><source src='${FILE_NAME}.${FILE_EXTENSION}' type='video/${FILE_EXTENSION}'></video>"
          else
            PREVIEW="No preview available for this file type."
          fi
          
          echo "::set-output name=release_notes::File URL: ${FILE_URL}<br>${PREVIEW}"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.determine_release_version.outputs.release_version }}
          release_name: Release ${{ steps.determine_release_version.outputs.release_version }}
          body: ${{ steps.create_release_notes.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ github.event.inputs.new_file_name || steps.determine_file_name.outputs.file_name }}.${{ steps.determine_file_name.outputs.file_name | splitext | last }}
          asset_name: ${{ github.event.inputs.new_file_name || steps.determine_file_name.outputs.file_name }}.${{ steps.determine_file_name.outputs.file_name | splitext | last }}
          asset_content_type: application/octet-stream

      - name: Cleanup
        run: |
          rm -f .gitattributes
          git rm .gitattributes
          git commit -m "Remove .gitattributes" || echo "No changes to commit"
          git push
